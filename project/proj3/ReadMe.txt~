Project Description
This assembly code takes in a user's input and converts the 20 or 21 
string length into the hexadecimal equivalent.
************************************************************************
0. Files:
************************************************************************

Readme.txt		- This file
hexConverter.asm	- The file you will be modifying and handing in
cfunc.c			- The file that outputs the hexadecimal value

List expected inputs/outputs

************************************************************************
1. Expected inputs/outputs
************************************************************************
Test 1
Enter Number: 18446744073709551615
Hexadecimal value is: FFFFFFFFFFFFFFFF

Test 2
Enter Number: afadf
Invalid Input!


Test 3
Enter Number: 245453
Invalid Input!



Test 4
Enter Number: afdg dbdgbsgbfnnhnfhnh45647637
Invalid Input!


Test 5
Enter Number: 3564276575375787dfjhfdjdtj
Invalid Input!


Test 6
Enter Number: 1107895634578278122
Hexadecimal value is: F600935B33E86EA


Test 7 
Enter Number: 9223372036854775808
Hexadecimal value is: 8000000000000000


Test 8
Enter Number: 12683270251100288260
Hexadecimal value is: B0040718331CB504


Test 9
Enter Number: 15683272751237288260
Hexadecimal value is: D9A62D79450FD144


Test 10
Enter Number: 9346678735677288564
Hexadecimal value is: 81B612CA0DBDF074


************************************************************************
2. How to compile and use this project
************************************************************************

Compilation

Use the following commands to build the project

$ nasm -g -f elf64 -F dwarf hexConverter.asm
$ gcc -g hexConverter.o cfunc.c -o converter.out
 
Usage

$ ./converter.out

************************************************************************
3. Functionality (describe your contributions here)
************************************************************************

Based on the provided hexConverter.asm file, I had to incorporate the
critical functions to convert the decimal values correctly. The main 
functions include "Letter Check" (spots out any special or letter in users
input), "ASCIItoDec" (Converts the string input into decimal format), and 
"DectoHex" (Converts decimal to hexadecimal equivalent). In addition, this 
file uses concepts push/pop stacks and call/returns to store values and
access appropriate supporting functions such as he reset and action type 
functions.

************************************************************************
4. Limitations (if any)
************************************************************************

There are no limitations since the program successfully executes the 
aforementioned output (See Expected Inputs/Outputs section)

************************************************************************
5. Applications (your thoughts) of this project
************************************************************************

This project could be used as a helpful tool for software developers to 
convert decimal values to hexadecimal values easily when traversing through
the values of certain assembly registers. In addition, this project
can help serve as a teaching tool for all people who are learning the
intricate details of assembly.


